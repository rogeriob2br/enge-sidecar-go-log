// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logcanal_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogCanalServiceClient is the client API for LogCanalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogCanalServiceClient interface {
	Sink(ctx context.Context, opts ...grpc.CallOption) (LogCanalService_SinkClient, error)
}

type logCanalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogCanalServiceClient(cc grpc.ClientConnInterface) LogCanalServiceClient {
	return &logCanalServiceClient{cc}
}

func (c *logCanalServiceClient) Sink(ctx context.Context, opts ...grpc.CallOption) (LogCanalService_SinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogCanalService_ServiceDesc.Streams[0], "/logcanal.LogCanalService/sink", opts...)
	if err != nil {
		return nil, err
	}
	x := &logCanalServiceSinkClient{stream}
	return x, nil
}

type LogCanalService_SinkClient interface {
	Send(*MessageRequest) error
	CloseAndRecv() (*ResponseStatus, error)
	grpc.ClientStream
}

type logCanalServiceSinkClient struct {
	grpc.ClientStream
}

func (x *logCanalServiceSinkClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logCanalServiceSinkClient) CloseAndRecv() (*ResponseStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogCanalServiceServer is the server API for LogCanalService service.
// All implementations must embed UnimplementedLogCanalServiceServer
// for forward compatibility
type LogCanalServiceServer interface {
	Sink(LogCanalService_SinkServer) error
	mustEmbedUnimplementedLogCanalServiceServer()
}

// UnimplementedLogCanalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogCanalServiceServer struct {
}

func (UnimplementedLogCanalServiceServer) Sink(LogCanalService_SinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (UnimplementedLogCanalServiceServer) mustEmbedUnimplementedLogCanalServiceServer() {}

// UnsafeLogCanalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogCanalServiceServer will
// result in compilation errors.
type UnsafeLogCanalServiceServer interface {
	mustEmbedUnimplementedLogCanalServiceServer()
}

func RegisterLogCanalServiceServer(s grpc.ServiceRegistrar, srv LogCanalServiceServer) {
	s.RegisterService(&LogCanalService_ServiceDesc, srv)
}

func _LogCanalService_Sink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogCanalServiceServer).Sink(&logCanalServiceSinkServer{stream})
}

type LogCanalService_SinkServer interface {
	SendAndClose(*ResponseStatus) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type logCanalServiceSinkServer struct {
	grpc.ServerStream
}

func (x *logCanalServiceSinkServer) SendAndClose(m *ResponseStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logCanalServiceSinkServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogCanalService_ServiceDesc is the grpc.ServiceDesc for LogCanalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogCanalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logcanal.LogCanalService",
	HandlerType: (*LogCanalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sink",
			Handler:       _LogCanalService_Sink_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/logcanal.proto",
}
